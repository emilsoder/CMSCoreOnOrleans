// <auto-generated />
using System;
using CMSCore.Content.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CMSCore.Content.Data.Migrations
{
    [DbContext(typeof(ContentDbContext))]
    [Migration("20180428095334_newmig2")]
    partial class newmig2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571");

            modelBuilder.Entity("CMSCore.Content.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("FeedItemId");

                    b.Property<string>("FullName");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("FeedItemId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CMSCore.Content.Models.Contents.FeedItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CommentsEnabled");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("FeedId");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("NormalizedTitle");

                    b.Property<string>("StaticContentId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("FeedId");

                    b.HasIndex("StaticContentId");

                    b.ToTable("FeedItems");
                });

            modelBuilder.Entity("CMSCore.Content.Models.EntityHistory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("EntityId");

                    b.Property<string>("FeedId");

                    b.Property<string>("FeedItemId");

                    b.Property<int>("OperationType");

                    b.Property<string>("PageId");

                    b.Property<string>("StaticContentId");

                    b.Property<string>("TagId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("FeedId");

                    b.HasIndex("FeedItemId");

                    b.HasIndex("PageId");

                    b.HasIndex("StaticContentId");

                    b.HasIndex("TagId");

                    b.HasIndex("UserId");

                    b.ToTable("EntityHistory");
                });

            modelBuilder.Entity("CMSCore.Content.Models.Feed", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.Property<string>("PageId");

                    b.HasKey("Id");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.ToTable("Feeds");
                });

            modelBuilder.Entity("CMSCore.Content.Models.Page", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<bool>("FeedEnabled");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.Property<string>("StaticContentId");

                    b.HasKey("Id");

                    b.HasIndex("StaticContentId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("CMSCore.Content.Models.StaticContent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsContentMarkdown");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("Modified");

                    b.HasKey("Id");

                    b.ToTable("StaticContents");
                });

            modelBuilder.Entity("CMSCore.Content.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("FeedItemId");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsRemoved");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.HasIndex("FeedItemId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CMSCore.Content.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("IdentityUserId");

                    b.Property<bool>("IsDisabled");

                    b.Property<bool>("IsRemoved");

                    b.Property<string>("LastName");

                    b.Property<DateTime>("Modified");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CMSCore.Content.Models.Comment", b =>
                {
                    b.HasOne("CMSCore.Content.Models.Contents.FeedItem")
                        .WithMany("Comments")
                        .HasForeignKey("FeedItemId");
                });

            modelBuilder.Entity("CMSCore.Content.Models.Contents.FeedItem", b =>
                {
                    b.HasOne("CMSCore.Content.Models.Feed", "Feed")
                        .WithMany("FeedItems")
                        .HasForeignKey("FeedId");

                    b.HasOne("CMSCore.Content.Models.StaticContent", "StaticContent")
                        .WithMany()
                        .HasForeignKey("StaticContentId");
                });

            modelBuilder.Entity("CMSCore.Content.Models.EntityHistory", b =>
                {
                    b.HasOne("CMSCore.Content.Models.Comment")
                        .WithMany("EntityHistory")
                        .HasForeignKey("CommentId");

                    b.HasOne("CMSCore.Content.Models.Feed")
                        .WithMany("EntityHistory")
                        .HasForeignKey("FeedId");

                    b.HasOne("CMSCore.Content.Models.Contents.FeedItem")
                        .WithMany("EntityHistory")
                        .HasForeignKey("FeedItemId");

                    b.HasOne("CMSCore.Content.Models.Page")
                        .WithMany("EntityHistory")
                        .HasForeignKey("PageId");

                    b.HasOne("CMSCore.Content.Models.StaticContent")
                        .WithMany("EntityHistory")
                        .HasForeignKey("StaticContentId");

                    b.HasOne("CMSCore.Content.Models.Tag")
                        .WithMany("EntityHistory")
                        .HasForeignKey("TagId");

                    b.HasOne("CMSCore.Content.Models.User")
                        .WithMany("EntityHistory")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CMSCore.Content.Models.Feed", b =>
                {
                    b.HasOne("CMSCore.Content.Models.Page", "Page")
                        .WithOne("Feed")
                        .HasForeignKey("CMSCore.Content.Models.Feed", "PageId");
                });

            modelBuilder.Entity("CMSCore.Content.Models.Page", b =>
                {
                    b.HasOne("CMSCore.Content.Models.StaticContent", "StaticContent")
                        .WithMany()
                        .HasForeignKey("StaticContentId");
                });

            modelBuilder.Entity("CMSCore.Content.Models.Tag", b =>
                {
                    b.HasOne("CMSCore.Content.Models.Contents.FeedItem")
                        .WithMany("Tags")
                        .HasForeignKey("FeedItemId");
                });
#pragma warning restore 612, 618
        }
    }
}
